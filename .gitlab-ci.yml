#------------------------------------------------------------
# Copyright (c) 2020 Thomas Kais
#
# This file is subject to the terms and conditions defined in
# file 'COPYING', which is part of this source code package.
#------------------------------------------------------------

stages:
  - build
  - analyze

variables:
  # TLS enabled https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  # Git Shallow cloning https://docs.gitlab.com/ee/ci/large_repositories/#shallow-cloning
  #GIT_DEPTH: 10
  # Git strategy https://docs.gitlab.com/ee/ci/large_repositories/#git-strategy
  GIT_STRATEGY: clone

#Build Stage

Raspbian:Stretch:
  stage: build
  image: docker:git
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/stretch:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/stretch:latest --tag $CI_REGISTRY_IMAGE/stretch:latest --file other/DockerfileStretch .
    - docker push $CI_REGISTRY_IMAGE/stretch:latest
  after_script:
    - docker run --volume $(pwd):/artifact $CI_REGISTRY_IMAGE/stretch:latest
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi_Stretch.tar.gz

Raspbian:Buster:
  stage: build
  image: docker:git
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/buster:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/buster:latest --tag $CI_REGISTRY_IMAGE/buster:latest --file other/DockerfileBuster .
    - docker push $CI_REGISTRY_IMAGE/buster:latest
  after_script:
    - docker run --volume $(pwd):/artifact $CI_REGISTRY_IMAGE/buster:latest
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi_Buster.tar.gz

Raspbian:Bullseye:
  stage: build
  image: docker:git
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/bullseye:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/bullseye:latest --tag $CI_REGISTRY_IMAGE/bullseye:latest --file other/DockerfileBullseye .
    - docker push $CI_REGISTRY_IMAGE/bullseye:latest
  after_script:
    - docker run --volume $(pwd):/artifact $CI_REGISTRY_IMAGE/bullseye:latest
  # It's allowed to fail because currently unreleased OS
  allow_failure: true
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi_Bullseye.tar.gz


Ubuntu:Xenial:QMake:
  stage: build
  image: ubuntu:xenial
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        gcc
        ccache
        qt5-default
        qttools5-dev-tools
    - gcc --version
    - qmake --version
  script:
    - qmake
    - make -j$(nproc)
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Xenial.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_Ubuntu_Xenial.tar.gz

Ubuntu:Bionic:CMake:
  stage: build
  image: ubuntu:bionic
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        gcc
        ccache
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - gcc --version
    - qmake --version
  script:
    - cmake CMakeLists.txt -G "Unix Makefiles"
    - make -j$(nproc)
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Bionic.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "artifact_UbuntuBionic"
    paths:
      - FotoBox_Ubuntu_Bionic.tar.gz

Ubuntu:Focal:CMake:
  stage: build
  image: ubuntu:focal
  variables:
    # tzdata prompt for input https://www.reddit.com/r/devops/comments/g781rs/ubuntu_2004_may_be_causing_issues_in_docker/
    TZ: "Europe/Berlin"
    DEBIAN_FRONTEND: "noninteractive"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        gcc
        ccache
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - gcc --version
    - qmake --version
  script:
    - cmake CMakeLists.txt -G "Unix Makefiles"
    - make -j$(nproc)
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Focal.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "artifact_UbuntuFocal"
    paths:
      - FotoBox_Ubuntu_Focal.tar.gz

# Analyze stage

Clang:
  stage: analyze
  image: ubuntu:bionic
  dependencies: []
  variables:
    CC: "clang-8"
    CXX: "clang++-8"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        clang-8
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - clang++-8 --version
  script:
    # '-Werror' -> Turn warnings into errors
    # https://releases.llvm.org/8.0.0/tools/clang/docs/DiagnosticsReference.html
    - cmake CMakeLists.txt -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra -Wpedantic"
    - make -j$(nproc) 2>&1 | tee output.txt
  after_script:
    - cat output.txt
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "Clang"
    when: on_failure
    paths:
      - output.txt

ClangTidy:
  stage: analyze
  image: ubuntu:bionic
  dependencies: []
  variables:
    CC: "clang-8"
    CXX: "clang++-8"
    CLANG_TIDY: "clang-tidy-8"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        clang-8
        llvm-8
        clang-tidy-8
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - clang++-8 --version
  script:
    - cmake CMakeLists.txt -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-Wno-everything" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CLANG_TIDY=ON
    - make -j$(nproc)
    - make -j$(nproc) tidy 2>&1 | tee output.txt
  after_script:
    - cat output.txt
    - |
      if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
        echo -e "\033[1;31m\xE2\x9C\x93 clang tidy failed!\033[0m";
        exit 1;
      else
        echo -e "\033[1;32m\xE2\x9C\x93 clang tidy passed!\033[0m";
      fi
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "ClangTidy"
    when: on_failure
    paths:
      - output.txt

Clazy:
  stage: analyze
  image: ubuntu:bionic
  dependencies: []
  variables:
    CC: "clang-8"
    CXX: "clang++-8"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        clang-8
        cmake
        qt5-default
        qttools5-dev
        wget
        libfuse2
    - wget --output-document=clazy.AppImage https://downloads.kdab.com/clazy/1.6/Clazy-x86_64-1.6.AppImage
    - chmod +x clazy.AppImage
    - ./clazy.AppImage --version
    - ./clazy.AppImage --standalone -version
  script:
    - cmake CMakeLists.txt -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-Wno-everything" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CLANG_CLAZY=ON
    - make -j$(nproc)
    - make -j$(nproc) clazy 2>&1 | tee output.txt
  after_script:
    - cat output.txt
    - |
      if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
        echo -e "\033[1;31m\xE2\x9C\x93 clang clazy failed!\033[0m";
        exit 1;
      else
        echo -e "\033[1;32m\xE2\x9C\x93 clang clazy passed!\033[0m";
      fi
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "ClangClazy"
    when: on_failure
    paths:
      - output.txt

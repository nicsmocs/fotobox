#------------------------------------------------------------
# Copyright (c) 2020 Thomas Kais
#
# This file is subject to the terms and conditions defined in
# file 'COPYING', which is part of this source code package.
#------------------------------------------------------------

variables:
  # TLS enabled https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  # Git Shallow cloning https://docs.gitlab.com/ee/ci/large_repositories/#shallow-cloning
  #GIT_DEPTH: 10
  # Git strategy https://docs.gitlab.com/ee/ci/large_repositories/#git-strategy
  GIT_STRATEGY: clone

# https://gitlab.com/help/ci/yaml/README.md#workflowrules-templates
workflow:
  rules:
    - when: always


RasPiOS32:Buster:
  image: docker:git
  variables:
    DOCKER_BUILDKIT: 1
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/buster32:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/buster32:latest --tag $CI_REGISTRY_IMAGE/buster32:latest --file other/DockerfileBuster32bit .
    - docker push $CI_REGISTRY_IMAGE/buster32:latest
    - docker run --volume $(pwd):/build/artifact $CI_REGISTRY_IMAGE/buster32:latest
  # Buster has reached EOL
  allow_failure: true
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi32_Buster.tar.gz

RasPiOS64:Buster:
  image: docker:git
  variables:
    DOCKER_BUILDKIT: 1
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/buster64:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/buster64:latest --tag $CI_REGISTRY_IMAGE/buster64:latest --file other/DockerfileBuster64bit .
    - docker push $CI_REGISTRY_IMAGE/buster64:latest
    - docker run --volume $(pwd):/build/artifact $CI_REGISTRY_IMAGE/buster64:latest
  # Buster has reached EOL
  allow_failure: true
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi64_Buster.tar.gz

RasPiOS32:Bullseye:
  image: docker:git
  variables:
    DOCKER_BUILDKIT: 1
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/bullseye32:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/bullseye32:latest --tag $CI_REGISTRY_IMAGE/bullseye32:latest --file other/DockerfileBullseye32bit .
    - docker push $CI_REGISTRY_IMAGE/bullseye32:latest
    - docker run --volume $(pwd):/build/artifact $CI_REGISTRY_IMAGE/bullseye32:latest
  allow_failure: false
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi32_Bullseye.tar.gz

RasPiOS64:Bullseye:
  image: docker:git
  variables:
    DOCKER_BUILDKIT: 1
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE/bullseye64:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/bullseye64:latest --tag $CI_REGISTRY_IMAGE/bullseye64:latest --file other/DockerfileBullseye64bit .
    - docker push $CI_REGISTRY_IMAGE/bullseye64:latest
    - docker run --volume $(pwd):/build/artifact $CI_REGISTRY_IMAGE/bullseye64:latest
  allow_failure: false
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - FotoBox_RasPi64_Bullseye.tar.gz

Ubuntu:Bionic:CMake:
  image: ubuntu:bionic
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        build-essential
        ccache
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - gcc --version
    - qmake --version
  script:
    - cmake -G "Unix Makefiles" .
    - cmake --build .
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Bionic.tar.gz -C . FotoBox -C ./other/ README.pdf
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "artifact_UbuntuBionic"
    paths:
      - FotoBox_Ubuntu_Bionic.tar.gz

Ubuntu:Focal:CMake:
  image: ubuntu:focal
  variables:
    # tzdata prompt for input https://www.reddit.com/r/devops/comments/g781rs/ubuntu_2004_may_be_causing_issues_in_docker/
    TZ: "Europe/Berlin"
    DEBIAN_FRONTEND: "noninteractive"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        build-essential
        ccache
        cmake
        ninja-build
        qt5-default
        qttools5-dev
    - cmake --version
    - gcc --version
    - qmake --version
  script:
    - cmake -G "Ninja" .
    - cmake --build .
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Focal.tar.gz -C . FotoBox -C ./other/ README.pdf
  artifacts:
    name: "FotoBox_$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "artifact_UbuntuFocal"
    paths:
      - FotoBox_Ubuntu_Focal.tar.gz


Clang:
  image: ubuntu:bionic
  variables:
    CC: "clang-10"
    CXX: "clang++-10"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        clang-10
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - clang++-10 --version
  script:
    # '-Werror' -> Turn warnings into errors
    # https://releases.llvm.org/8.0.0/tools/clang/docs/DiagnosticsReference.html
    - cmake . -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra -Wpedantic"
    - make -j$(nproc) 2>&1 | tee output.txt
    - |
      if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
        echo -e "\033[1;31m\xE2\x9C\x93 clang diagnostic flags failed!\033[0m";
        exit 1;
      else
        echo -e "\033[1;32m\xE2\x9C\x93 clang diagnostic flags passed!\033[0m";
      fi
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "Clang"
    when: on_failure
    paths:
      - output.txt

ClangTidy:
  image: ubuntu:bionic
  variables:
    CC: "clang-10"
    CXX: "clang++-10"
    CLANG_TIDY: "clang-tidy-10"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        clang-10
        llvm-10
        clang-tidy-10
        cmake
        qt5-default
        qttools5-dev
    - cmake --version
    - clang++-10 --version
  script:
    - cmake . -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-Wno-everything" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CLANG_TIDY=ON
    - make -j$(nproc)
    - make -j$(nproc) tidy 2>&1 | tee output.txt
    - >
      if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
        echo -e "\033[1;31m\xE2\x9C\x93 clang tidy failed!\033[0m";
        exit 1;
      else
        echo -e "\033[1;32m\xE2\x9C\x93 clang tidy passed!\033[0m";
      fi
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "ClangTidy"
    when: on_failure
    paths:
      - output.txt

Clazy:
  image: ubuntu:focal
  variables:
    CC: "clang-10"
    CXX: "clang++-10"
    # tzdata prompt for input https://www.reddit.com/r/devops/comments/g781rs/ubuntu_2004_may_be_causing_issues_in_docker/
    TZ: "Europe/Berlin"
    DEBIAN_FRONTEND: "noninteractive"
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        clazy
        clang-10
        cmake
        qt5-default
        qttools5-dev
    - clazy --version
    - clazy --standalone -version
  script:
    - cmake . -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-Wno-everything" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CLANG_CLAZY=ON
    - make -j$(nproc)
    - make -j$(nproc) clazy 2>&1 | tee output.txt
    - >
      if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
        echo -e "\033[1;31m\xE2\x9C\x93 clang clazy failed!\033[0m";
        exit 1;
      else
        echo -e "\033[1;32m\xE2\x9C\x93 clang clazy passed!\033[0m";
      fi
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    expose_as: "ClangClazy"
    when: on_failure
    paths:
      - output.txt


# https://gitlab.com/pages/doxygen/-/blob/master/.gitlab-ci.yml
Doxygen:
  image: alpine
  except:
    - develop
  before_script:
    - apk update
    - apk add doxygen graphviz ttf-freefont
    - doxygen --version
  script:
    - doxygen other/Doxyfile

pages:
  image: alpine
  only:
    - develop
  before_script:
    - apk update
    - apk add doxygen graphviz ttf-freefont
    - doxygen --version
  script:
    - doxygen other/Doxyfile
    - mv html/ public/
  artifacts:
    paths:
      - public

stages:
  - build
  - analyze

variables:
  # TLS enabled https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  # Git Shallow cloning https://docs.gitlab.com/ee/ci/large_repositories/#shallow-cloning
  #GIT_DEPTH: 10
  # Git strategy https://docs.gitlab.com/ee/ci/large_repositories/#git-strategy
  GIT_STRATEGY: clone


Raspbian:Stretch:
  stage: build
  image: docker:git
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest --file other/DockerfileStretch .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  after_script:
    - docker run --volume $(pwd):/artifact $CI_REGISTRY_IMAGE:latest
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - FotoBox_RasPi_Stretch.tar.gz

Raspbian:Buster:
  stage: build
  image: docker:git
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest --file other/DockerfileBuster .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  after_script:
    - docker run --volume $(pwd):/artifact buildfotobox
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - FotoBox_RasPi_Buster.tar.gz

Raspbian:Bullseye:
  stage: build
  image: docker:git
  services:
    # Docker in Docker (dind)
    - docker:dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login --password-stdin --username $CI_REGISTRY_USER $CI_REGISTRY
    # Enable an execution of different multi-architecture containers by QEMU
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  script:
    # Using Docker caching https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest --file other/DockerfileBullseye .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  after_script:
    - docker run --volume $(pwd):/artifact buildfotobox
  # It's allowed to fail because currently unreleased OS
  allow_failure: true
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - FotoBox_RasPi_Bullseye.tar.gz

Ubuntu:Xenial:QMake:
  stage: build
  # Official Ubuntu Image https://hub.docker.com/_/ubuntu
  image: ubuntu:xenial
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        build-essential
        ccache
        qt5-default
        qttools5-dev-tools
    - gcc --version
    - qmake --version
  script:
    - qmake
    - make -j$(nproc)
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Xenial.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - FotoBox_Ubuntu_Xenial.tar.gz

Ubuntu:Bionic:CMake:
  stage: build
  # Official Ubuntu Image https://hub.docker.com/_/ubuntu
  image: ubuntu:bionic
  before_script:
    - apt-get update -qq
    - apt-get install -qq
        build-essential
        ccache
        qt5-default
        qttools5-dev
    - cmake --version
    - gcc --version
    - qmake --version
  script:
    - cmake CMakeLists.txt -G "Unix Makefiles"
    - make -j$(nproc)
  after_script:
    - tar -cvzf ./FotoBox_Ubuntu_Bionic.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - FotoBox_Ubuntu_Bionic.tar.gz

#------------------------------------------------------------
# Copyright (c) 2019 Thomas Kais
#
# This file is subject to the terms and conditions defined in
# file 'COPYING', which is part of this source code package.
#------------------------------------------------------------

# blacklist
branches:
  except:
    - gh-pages

jobs:
  allow_failures:
    env:
      - CAN_FAIL=true
  include:
    - name: "macOS"
      os: osx
      compiler: clang
      language: cpp
      before_install:
        - brew update
      install:
        #install latest Qt https://formulae.brew.sh/formula/qt and creates symlinks to installation
        - brew install qt
        - brew link --force qt
      before_script:
        - qmake --version
      script:
        - qmake
        - make -j$(nproc)
      before_deploy:
        - macdeployqt FotoBox.app -verbose=2
        - cp ./other/README.pdf ./README.pdf
        - zip --verbose --symlinks --recurse-paths -9 FotoBox_macOS.zip FotoBox.app/ README.pdf

    - name: "Raspbian Stretch"
      os: linux
      dist: bionic
      language: ruby
      services:
        - docker
      before_install:
        #enable an execution of different multi-architecture containers by QEMU
        - docker run --rm --privileged multiarch/qemu-user-static:register --reset
      install:
        #build FotoBox container
        - docker build --tag buildfotobox --file other/DockerfileStretch .
      script:
        #execute 'CMD' command (Dockerfile) to build
        - docker run --volume $(pwd):/artifact buildfotobox

    - name: "Raspbian Buster"
      os: linux
      dist: bionic
      language: ruby
      services:
        - docker
      before_install:
        #enable an execution of different multi-architecture containers by QEMU
        - docker run --rm --privileged multiarch/qemu-user-static:register --reset
      install:
        #build FotoBox container
        - docker build --tag buildfotobox --file other/DockerfileBuster .
      script:
        #execute 'CMD' command (Dockerfile) to build
        - docker run --volume $(pwd):/artifact buildfotobox

    - name: "Raspbian Bullseye (unreleased)"
      env: CAN_FAIL=true
      os: linux
      dist: bionic
      language: ruby
      services:
        - docker
      before_install:
        #enable an execution of different multi-architecture containers by QEMU
        - docker run --rm --privileged multiarch/qemu-user-static:register --reset
      install:
        #build FotoBox container
        - docker build --tag buildfotobox --file other/DockerfileBullseye .
      script:
        #execute 'CMD' command (Dockerfile) to build
        - docker run --volume $(pwd):/artifact buildfotobox

    - name: "Ubuntu Xenial QMake gcc"
      os: linux
      dist: xenial
      language: cpp
      compiler: gcc
      addons:
        apt:
          update: true
          packages:
            - qt5-default
            - qttools5-dev-tools
      before_script:
        - gcc --version
        - qmake --version
      script:
        - qmake
        - make -j$(nproc)
      before_deploy:
        - tar -cvzf ./FotoBox_Ubuntu_Xenial.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh

    - name: "Ubuntu Bionic Beaver CMake gcc"
      os: linux
      dist: bionic
      language: cpp
      compiler: gcc
      addons:
        apt:
          update: true
          packages:
            - qt5-default
            - qttools5-dev
      before_script:
        - cmake --version
        - gcc --version
        - qmake --version
      script:
        - cmake CMakeLists.txt -G "Unix Makefiles"
        - make -j$(nproc)
      before_deploy:
        - tar -cvzf ./FotoBox_Ubuntu_Bionic.tar.gz -C . FotoBox -C ./other/ README.pdf install_dependencies.sh

    - name: "Ubuntu Bionic Beaver CMake Debug clang 8 diagnostic flags"
      os: linux
      dist: bionic
      addons:
        apt:
          update: true
          packages:
            - qt5-default
            - qttools5-dev
            - clang-8
      env:
        - CC=clang-8
        - CXX=clang++-8
      before_script:
        - cmake --version
        - clang++-8 --version
      script:
        # '-Werror' -> Turn warnings into errors
        # https://releases.llvm.org/8.0.0/tools/clang/docs/DiagnosticsReference.html
        - cmake CMakeLists.txt -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra -Wpedantic"
        - make -j$(nproc) 2>&1 | tee output.txt
        - |
          if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
            echo -e "\033[1;31m\xE2\x9C\x93 clang diagnostic flags failed!\033[0m";
            exit 1;
          else
            echo -e "\033[1;32m\xE2\x9C\x93 clang diagnostic flags passed!\033[0m";
          fi

    - name: "Ubuntu Bionic Beaver CMake Debug clang tidy 8"
      os: linux
      dist: bionic
      addons:
        apt:
          update: true
          packages:
            - qt5-default
            - qttools5-dev
            - llvm-8
            - clang-8
            - clang-tidy-8
      env:
        - CC=clang-8
        - CXX=clang++-8
        - CLANG_TIDY=clang-tidy-8
      before_script:
        - cmake --version
        - clang++-8 --version
        - clang-tidy-8 --version
      script:
        - cmake CMakeLists.txt -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-Wno-everything" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CLANG_TIDY=ON
        - make -j$(nproc)
        - make -j$(nproc) tidy 2>&1 | tee output.txt
        - |
          if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
            echo -e "\033[1;31m\xE2\x9C\x93 clang tidy failed!\033[0m";
            exit 1;
          else
            echo -e "\033[1;32m\xE2\x9C\x93 clang tidy passed!\033[0m";
          fi

    - name: "Ubuntu Bionic Beaver CMake Debug clang clazy 1.6"
      os: linux
      dist: bionic
      addons:
        apt:
          update: true
          packages:
            - qt5-default
            - qttools5-dev
            - libfuse2
      before_script:
        - wget --quiet --output-document=clazy.AppImage https://downloads.kdab.com/clazy/1.6/Clazy-x86_64-1.6.AppImage
        - chmod +x clazy.AppImage
        - ./clazy.AppImage --version
        - ./clazy.AppImage --standalone -version
      script:
        - cmake CMakeLists.txt -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-Wno-everything" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CLANG_CLAZY=ON
        - make -j$(nproc)
        - make -j$(nproc) clazy 2>&1 | tee output.txt
        - |
          if [[ -n $(grep -v "_autogen" output.txt | grep "warning: ") ]] || [[ -n $(grep -v "_autogen" output.txt | grep "error: ") ]]; then
            echo -e "\033[1;31m\xE2\x9C\x93 clang clazy failed!\033[0m";
            exit 1;
          else
            echo -e "\033[1;32m\xE2\x9C\x93 clang clazy passed!\033[0m";
          fi

    - name: "macOS Doxygen"
      os: osx
      osx_image: xcode11.5
      before_install:
        - brew update
      install:
        - brew install doxygen graphviz
      before_script:
        - doxygen --version
      script:
        - doxygen other/Doxyfile
      deploy:
        edge: true
        provider: pages
        cleanup: false
        local_dir: html
        token: $GH_REPO_TOKEN
        keep_history: false
        on:
          branch: develop

notifications:
  slack:
    secure: cm0Bd6mKSZtfhnrci88VueM1h7iK7nBaHRCwSlAKzNzRNTbIVR14wKgcqo6jfqf0hTiB4rnGB3jYxWlcCcoJ51xTF+WlI76IZPcdx/aXb15PwzOB8wNBjisIDhLQjQHzRhuAvueDHlsFNRcYmJyg0t+FZazzDXQMqf3oVmJrUw6/rGFJUxBiFE/B4AS6UmdmvKUv9P3hJMM+nSbHDn8uKl4MhiRTz0bkkQVERJ2TC2WIgQet33afTysFTxpVj+TxLynIFpAm+4GnXfRkd/eDNV70w2gEHtLvGGi2OWLIDbL0aBst4RqdAW1FSppnWv5sIfLIpwuN1Fpxi5LQ7XmMx8gEWxlWGNR3dT5CdGzw/IyyYj5/6pAuTjWC9I2/4PYG4bxFknhlaMsw5LyUlf4m1ybUBTds72xu+s5mnxjjpSCnWOaS+/MBBs8BJNXzcGC1YbovbNlw0OdKdtgKcR16sA+Zc40nOa52EbAV1wt0m+1bm6AHghC03jvqKVp84mJvJ+xBKVc1FoErFYZ9EtFmGbtz9QhBeIjB1uV1WwaNewOlJmYOMWLPdoPY2krHxGXQ2Ta2yRon3+2jlutJsSBboYBu1JXVoxtzh2eTnqfgnYKTWZV6EIiLLWiguFRgQWDwtyvwan9v9+xG8Sg95v/haU8ljdu/Qks3a6BYmxQgglI=

deploy:
  edge: true
  provider: releases
  token: $GH_REPO_TOKEN
  file:
    - FotoBox_macOS.zip
    - FotoBox_RasPi_Stretch.tar.gz
    - FotoBox_RasPi_Buster.tar.gz
    - FotoBox_Ubuntu_Xenial.tar.gz
    - FotoBox_Ubuntu_Bionic.tar.gz
  cleanup: false
  on:
    tags: true
